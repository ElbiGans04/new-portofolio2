import Berlangganan from "@/src/components/Berlangganan";
import { breakpoints } from "@/src/config/chakra.config";
import {
  Box,
  Button,
  Grid,
  GridItem,
  HStack,
  Input,
  Link,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  SimpleGrid,
  Text,
  useDisclosure,
  useMediaQuery,
  VStack,
  useColorModeValue,
  useToken,
} from "@chakra-ui/react";
import Head from "next/head";
import NextImage from "next/image";
import NextLink from "next/link";
import React, { useMemo, useState, useEffect } from "react";
import getFormatDateArticle from "@/src/helpers/getFormatDateArticle";
import getReadingTime from "@/src/helpers/getReadingTime";
import getTextFromMd from "@/src/helpers/getTextFromMd";
import { getArticles } from "@/src/services/articles";
import urls from "@/src/constants/url";
import { useReducer } from "react";
import ReactSelect from "react-select";
import { configuration } from "@/src/config/chakra.config";
import { getTags } from "@/src/services/tags";
import dayjs from "dayjs";
import isSameOrAfter from "dayjs/plugin/isSameOrAfter";
import isSameOrBefore from "dayjs/plugin/isSameOrBefore";
import InputWithButton from "@/src/components/Input/withButton";
import TagBlog from "@/src/components/Tags";
dayjs.extend(isSameOrAfter);
dayjs.extend(isSameOrBefore);

export async function getStaticProps() {
  const { data: dataArticle } = await getArticles();
  const { data: dataTags } = await getTags();

  return {
    props: {
      dataArticle: !dataArticle
        ? null
        : dataArticle.map((candidate) => ({
            ...candidate,
            attributes: {
              ...candidate.attributes,
              plainDeskripsi: getTextFromMd(candidate.attributes.isi).value,
            },
          })),
      dataTags,
    },
  };
}

export default function Blogs({ dataArticle, dataTags }) {
  const [isLg] = useMediaQuery(`(min-width: ${breakpoints.lg})`, {
    ssr: true,
    fallback: false, // return false on the server, and re-evaluate on the client side
  });
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [state, setState] = useState(dataArticle);
  const backgroundColor = useColorModeValue("#D9D9D9", "gray.900");
  return (
    <>
      <Head>
        <title>Blogs</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <VStack w={["100%"]} alignItems={["flex-start"]} position={["relative"]}>
        <Grid
          w={["100%"]}
          height={["100%"]}
          templateColumns={["repeat(1, 1fr)", null, null, "repeat(3, 1fr)"]}
          templateRows={["repeat(1, 1fr)", null, null, "repeat(2, 1fr)"]}
          paddingY={["20px"]}
        >
          {/* Left */}
          {isLg && (
            <GridItem
              borderRightWidth={[0, "1px"]}
              borderRightColor={["borderLayer1"]}
              paddingX={[0, "20px"]}
              height={["100%"]}
              paddingTop={["20px"]}
              paddingBottom={["100px"]}
              position={["static", null, null, "sticky"]}
              top={["105px"]}
              left={["0"]}
            >
              <FilterComponent
                dataArticle={dataArticle}
                setState={setState}
                data={dataTags}
                langgananTampil={isLg}
              />
            </GridItem>
          )}

          {/* Right */}
          <GridItem colSpan={[1, null, null, 2]} rowSpan={[1, null, null, 2]}>
            {!isLg && (
              <Button onClick={onOpen} variant="brandOutline">
                Filter
              </Button>
            )}
            <VStack
              w={["100%"]}
              h={["100%"]}
              paddingX={[0, null, null, "50px"]}
              alignItems={["flex-start"]}
              spacing={["100px"]}
              marginTop={["20px"]}
            >
              {/* Card */}
              {Array.isArray(state) &&
                state.map(({ id, attributes }, index) => {
                  return (
                    <React.Fragment key={id}>
                      <VStack
                        w={["100%"]}
                        h={["max-content"]}
                        alignItems={["flex-start"]}
                        spacing={["30px"]}
                      >
                        {/* Header */}
                        <Link
                          as={NextLink}
                          href={`${urls.blogs.url}/${attributes.slug}`}
                          width={["100%"]}
                        >
                          <Box
                            w={["100%", "90%"]}
                            height={["200px", "250px", "350px"]}
                            backgroundColor={[backgroundColor]}
                            flexShrink={[0]}
                            position={["relative"]}
                          >
                            {attributes.images &&
                              Array.isArray(attributes.images.data) &&
                              attributes.images.data[0] && (
                                <NextImage
                                  src={`${process.env.NEXT_PUBLIC_STRAPI_BASE_URL}${attributes?.images?.data[0]?.attributes?.url}`}
                                  fill
                                  alt={attributes.judul}
                                  sizes={`100vw, (min-width: ${breakpoints.sm}) 90vw, (min-width: ${breakpoints.lg}) 50vw,`}
                                  priority={index === 0}
                                />
                              )}
                          </Box>
                        </Link>

                        {/* Body */}

                        <VStack
                          w={["100%"]}
                          height={["100%"]}
                          alignItems={["flex-start"]}
                          spacing={["40px"]}
                        >
                          <VStack
                            w={["100%"]}
                            height={["100%"]}
                            alignItems={["flex-start"]}
                          >
                            <Link
                              fontSize={["2xl", "3xl", "4xl"]}
                              fontWeight={["bold"]}
                              _hover={{
                                textDecoration: "underline",
                              }}
                              as={NextLink}
                              href={`${urls.blogs.url}/${attributes.slug}`}
                            >
                              {attributes.judul}
                            </Link>

                            <Text fontSize={["md", "lg", "xl"]}>
                              {getFormatDateArticle(attributes.createdAt)} -{" "}
                              {getReadingTime(attributes.plainDeskripsi)} Minutes
                            </Text>
                          </VStack>
                          <VStack w={["100%"]} alignItems={["flex-start"]}>
                            <Text fontSize={["lg", "xl", "2xl"]}>
                              {attributes.deskripsi}...
                            </Text>
                            <Link
                              fontSize={["lg", "xl", "2xl"]}
                              fontWeight={["bold"]}
                              color={["brand.50"]}
                              _hover={{
                                textDecoration: "underline",
                              }}
                              as={NextLink}
                              href={`${urls.blogs.url}/${attributes.slug}`}
                            >
                              Click here to read more.
                            </Link>
                          </VStack>
                        </VStack>

                        {/* Footer */}
                        <HStack
                          w={["100%"]}
                          height={["100%"]}
                          alignItems={["flex-start"]}
                        >
                          {attributes.tags.data.map(({ id, attributes }) => {
                            return (
                              <TagBlog
                                key={id}
                                link={`${urls.blogs.url}?${urls.blogs.params.tag}=${id}`}
                              >
                                #{attributes.judul}
                              </TagBlog>
                            );
                          })}
                        </HStack>
                      </VStack>

                      {/* Batas */}
                      {state.length - 1 !== index && (
                        <Box
                          w={["90%"]}
                          height={["1px"]}
                          bgColor={["borderLayer1"]}
                        />
                      )}
                    </React.Fragment>
                  );
                })}
              {/* End Of Card */}
            </VStack>
          </GridItem>

          <Modal size="xl" isOpen={isOpen} onClose={onClose}>
            <ModalOverlay />
            <ModalContent>
              <ModalHeader color="brand.50">Personal Project</ModalHeader>
              <ModalCloseButton color="brand.50" />
              <ModalBody>
                <FilterComponent
                  dataArticle={dataArticle}
                  data={dataTags}
                  setState={setState}
                  forModal={true}
                  langgananTampil={false}
                />
              </ModalBody>

              <ModalFooter>
                <Button variant="brand" onClick={onClose}>
                  Close
                </Button>
              </ModalFooter>
            </ModalContent>
          </Modal>
        </Grid>
      </VStack>
    </>
  );
}

const initialFiltersState = {
  title: "",
  tags: [],
  date: {
    from: "",
    until: "",
  },
};

function MainReducer(state, action) {
  switch (action.type) {
    case "filter-title-change": {
      return {
        ...state,
        title: action.payload.data,
      };
    }
    case "filter-tags-change": {
      return {
        ...state,
        tags: action.payload.data,
      };
    }
    case "filter-date-from-change": {
      return {
        ...state,
        date: {
          ...state.date,
          from: action.payload.data,
        },
      };
    }
    case "filter-date-until-change": {
      return {
        ...state,
        date: {
          ...state.date,
          until: action.payload.data,
        },
      };
    }
  }
}

function FilterComponent({
  langgananTampil,
  forModal,
  data,
  setState,
  dataArticle,
}) {
  const [state, dispatch] = useReducer(MainReducer, initialFiltersState);
  const dataMemo = useMemo(() => {
    if (!Array.isArray(data)) return [];
    return data.map((candidate) => ({
      label: candidate.attributes.judul,
      value: candidate.id,
    }));
  }, [data]);
  const [search, setSearch] = useState("");
  const [bgLayer1] = useToken("colors", ["bgLayer1"]);
  const textColor = useColorModeValue(configuration.colors.brand[50], "white");

  useEffect(() => {
    if (Array.isArray(dataArticle)) {
      setState(
        dataArticle
          .filter(({ attributes }) => {
            if (!state.title) return true;
            return attributes.judul
              .toLowerCase()
              .search(state.title.toLowerCase()) === -1
              ? false
              : true;
          })
          .filter(({ attributes }) => {
            return state.tags.length === 0
              ? true
              : attributes.tags.data.find((candidate) =>
                  state.tags.find(
                    (candidate2) => candidate2.value === candidate.id
                  )
                );
          })
          .filter(({ attributes }) => {
            if (!state.date.from && !state.date.until) return true;

            const waktuData = dayjs(attributes.createdAt);
            const waktuDulu = dayjs(state.date.from || new Date());
            const waktuSetelah = dayjs(state.date.until || new Date());
            return waktuData.isSameOrAfter(waktuDulu, "day") &&
              waktuData.isSameOrBefore(waktuSetelah, "day")
              ? true
              : false;
          })
      );
    }
  }, [state, dataArticle, setState]);

  return (
    <VStack
      w={["100%"]}
      height={[forModal ? "350px" : "100%"]}
      alignItems={["center"]}
      spacing={["60px"]}
    >
      <VStack
        w={["100%"]}
        height={["max-content"]}
        alignItems={["center"]}
        spacing={["10px"]}
      >
        <Text
          color="brand.50"
          fontSize={["2xl", "3xl", "4xl"]}
          fontWeight={["bold"]}
        >
          Filter
        </Text>

        <VStack w={["100%"]} h={["100%"]} spacing={["20px"]}>
          <FilterComponentField title="Title">
            <InputWithButton
              onClick={() => {
                dispatch({
                  type: "filter-title-change",
                  payload: {
                    data: search,
                  },
                });
              }}
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            >
              Find
            </InputWithButton>
          </FilterComponentField>

          <FilterComponentField title="Tags">
            <HStack
              w={["100%"]}
              borderRadius={["50%"]}
              h={["100%"]}
              borderColor={["brand.50"]}
            >
              <ReactSelect
                onChange={(values) =>
                  dispatch({
                    type: "filter-tags-change",
                    payload: {
                      data: values,
                    },
                  })
                }
                defaultValue={state.tags}
                isMulti
                options={dataMemo}
                styles={{
                  container: (baseStyles) => {
                    return {
                      ...baseStyles,
                      width: "100%",
                    };
                  },
                  multiValue: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      backgroundColor: state.isDisabled
                        ? configuration.colors.brand[100]
                        : state.isFocused
                        ? configuration.colors.brand[500]
                        : configuration.colors.brand[50],
                      ":hover": {
                        backgroundColor: state.isDisabled
                          ? configuration.colors.brand[300]
                          : state.isFocused
                          ? configuration.colors.brand[50]
                          : configuration.colors.brand[500],
                      },
                    };
                  },
                  menu: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      backgroundColor: bgLayer1,
                    };
                  },
                  multiValueLabel: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      color: "white",
                      fontWeight: "bold",
                    };
                  },
                  multiValueRemove: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      color: "white",
                      backgroundColor: state.isDisabled
                        ? configuration.colors.brand[300]
                        : state.isFocused
                        ? configuration.colors.brand[50]
                        : configuration.colors.brand[400],
                      ":hover": {
                        backgroundColor: state.isDisabled
                          ? configuration.colors.brand[300]
                          : state.isFocused
                          ? configuration.colors.brand[50]
                          : configuration.colors.brand[600],
                      },
                    };
                  },
                  clearIndicator: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      color: state.isDisabled
                        ? configuration.colors.brand[100]
                        : state.isFocused
                        ? configuration.colors.brand[500]
                        : configuration.colors.brand[50],
                      ":hover": {
                        color: state.isDisabled
                          ? configuration.colors.brand[300]
                          : state.isFocused
                          ? configuration.colors.brand[700]
                          : configuration.colors.brand[600],
                      },
                    };
                  },
                  control: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      backgroundColor: bgLayer1,
                      borderColor: state.isDisabled
                        ? configuration.colors.brand[100]
                        : state.isFocused
                        ? configuration.colors.brand[500]
                        : configuration.colors.brand[50],
                      ":hover": {
                        borderColor: state.isDisabled
                          ? configuration.colors.brand[300]
                          : state.isFocused
                          ? configuration.colors.brand[700]
                          : configuration.colors.brand[600],
                      },
                      boxShadow: state.isFocused
                        ? `0 0 3px ${configuration.colors.brand[50]}`
                        : state.isDisabled
                        ? `0 0 1px ${configuration.colors.brand[100]}`
                        : `0 0 1px ${configuration.colors.brand[500]}`,
                    };
                  },
                  dropdownIndicator: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      color: state.isDisabled
                        ? configuration.colors.brand[100]
                        : state.isFocused
                        ? configuration.colors.brand[500]
                        : configuration.colors.brand[50],
                      ":hover": {
                        color: state.isDisabled
                          ? configuration.colors.brand[300]
                          : state.isFocused
                          ? configuration.colors.brand[700]
                          : configuration.colors.brand[600],
                      },
                    };
                  },
                  option: (baseStyles, state) => {
                    return {
                      ...baseStyles,
                      color: state.isDisabled
                        ? configuration.colors.brand[100]
                        : state.isFocused || state.isSelected
                        ? "white"
                        : textColor,
                      backgroundColor: state.isDisabled
                        ? configuration.colors.brand[100]
                        : state.isSelected
                        ? configuration.colors.brand[50]
                        : state.isFocused
                        ? configuration.colors.brand[400]
                        : bgLayer1,
                      ":active": {
                        backgroundColor: state.isDisabled
                          ? configuration.colors.brand[100]
                          : state.isSelected
                          ? configuration.colors.brand[400]
                          : state.isFocused
                          ? configuration.colors.brand[300]
                          : "white",
                      },
                    };
                  },
                }}
              />
            </HStack>
          </FilterComponentField>

          <SimpleGrid columns={2} w={["100%"]} spacingX={["30px"]}>
            <FilterComponentField title="From">
              <HStack
                w={["100%"]}
                borderRadius={["50%"]}
                h={["100%"]}
                borderColor={["brand.50"]}
              >
                <Input
                  w={["100%"]}
                  type="date"
                  value={state.date.from}
                  onInput={(e) =>
                    dispatch({
                      type: "filter-date-from-change",
                      payload: {
                        data: e.target.value,
                      },
                    })
                  }
                ></Input>
              </HStack>
            </FilterComponentField>
            <FilterComponentField title="To">
              {" "}
              <HStack
                w={["100%"]}
                borderRadius={["50%"]}
                h={["100%"]}
                borderColor={["brand.50"]}
              >
                <Input
                  w={["100%"]}
                  type="date"
                  value={state.date.until}
                  onInput={(e) =>
                    dispatch({
                      type: "filter-date-until-change",
                      payload: {
                        data: e.target.value,
                      },
                    })
                  }
                ></Input>
              </HStack>
            </FilterComponentField>
          </SimpleGrid>
        </VStack>
      </VStack>

      {langgananTampil && (
        <>
          <Box w={["90%"]} height={["1px"]} bgColor={["borderLayer1"]} />
          <Berlangganan maxContent />
        </>
      )}
    </VStack>
  );
}

function FilterComponentField({ title, children }) {
  return (
    <VStack w={["100%"]} h={["100%"]} alignItems={["flex-start"]}>
      <Text
        color="brand.50"
        fontSize={["lg", "xl", "2xl"]}
        fontWeight={["bold"]}
      >
        {title}
      </Text>
      {children}
    </VStack>
  );
}
