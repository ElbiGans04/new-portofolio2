import {
  Box,
  Button,
  Grid,
  GridItem,
  HStack,
  Input,
  Link,
  SimpleGrid,
  Text,
  VStack,
  useMediaQuery,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  useDisclosure,
} from "@chakra-ui/react";
import Head from "next/head";
import NextLink from "next/link";
import Berlangganan from "@/src/components/Berlangganan";
import { breakpoints } from "@/src/config/chakra.config";
import React from "react";
import { unified } from "unified";
import remarkParse from "remark-parse";
import NextImage from "next/image";
// import remarkRehype from 'remark-rehype'
// import rehypeStringify from 'rehype-stringify'
import remarkReText from "remark-retext";
import retextStringify from "retext-stringify";
import retextEnglish from "retext-english";
import dayjs from "dayjs";
export async function getStaticProps() {
  const processor = unified()
    .use(remarkParse)
    .use(remarkReText, unified().use(retextEnglish), {
      // ignore: ["heading"],
    })
    .use(retextStringify);

  const { data } = await (
    await fetch(`${process.env.STRAPI_BASE_API_URL}/articles?populate=*`)
  ).json();

  return {
    props: {
      data: data.map((candidate) => ({
        ...candidate,
        attributes: {
          ...candidate.attributes,
          plainDeskripsi: processor.processSync(candidate.attributes.isi).value,
        },
      })),
    },
  };
}

export default function Blogs({ data }) {
  const [isLg] = useMediaQuery(`(min-width: ${breakpoints.lg})`, {
    ssr: true,
    fallback: false, // return false on the server, and re-evaluate on the client side
  });
  const { isOpen, onOpen, onClose } = useDisclosure();
  return (
    <>
      <Head>
        <title>Blogs</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <VStack w={["100%"]} alignItems={["flex-start"]} position={["relative"]}>
        <Grid
          w={["100%"]}
          height={["100%"]}
          templateColumns={["repeat(1, 1fr)", null, null, "repeat(3, 1fr)"]}
          templateRows={["repeat(1, 1fr)", null, null, "repeat(2, 1fr)"]}
          paddingY={["20px"]}
        >
          {/* Left */}
          {isLg && (
            <GridItem
              borderRightWidth={[0, "1px"]}
              borderRightColor={["rgba(0,0,0, 0.2)"]}
              paddingX={[0, "20px"]}
              height={["100%"]}
              paddingTop={["20px"]}
              paddingBottom={["100px"]}
              position={["static", null, null, "sticky"]}
              top={["105px"]}
              left={["0"]}
            >
              <FilterComponent langgananTampil={isLg} />
            </GridItem>
          )}

          {/* Right */}
          <GridItem colSpan={[1, null, null, 2]} rowSpan={[1, null, null, 2]}>
            {!isLg && (
              <Button onClick={onOpen} variant="brandOutline">
                Filter
              </Button>
            )}
            <VStack
              w={["100%"]}
              h={["100%"]}
              paddingX={[0, null, null, "50px"]}
              alignItems={["flex-start"]}
              spacing={["100px"]}
              marginTop={["20px"]}
            >
              {/* Card */}
              {data.map(({ id, attributes }) => {
                const waktuMembaca = Math.ceil(
                  attributes.plainDeskripsi.split(" ").length / 125
                );
                return (
                  <React.Fragment key={id}>
                    <VStack
                      w={["100%"]}
                      h={["max-content"]}
                      alignItems={["flex-start"]}
                      spacing={["30px"]}
                    >
                      {/* Header */}
                      <Link
                        as={NextLink}
                        href={`/blogs/${id}`}
                        width={["100%"]}
                      >
                        <Box
                          w={["100%", "90%"]}
                          height={["200px", "250px", "350px"]}
                          backgroundColor={["#D9D9D9"]}
                          flexShrink={[0]}
                          position={["relative"]}
                        >
                          {attributes.images &&
                            Array.isArray(attributes.images.data) &&
                            attributes.images.data[0] && (
                              <NextImage
                                src={`${process.env.NEXT_PUBLIC_STRAPI_BASE_URL}${attributes.images.data[0].attributes.formats.large.url}`}
                                fill
                                alt={attributes.judul}
                              />
                            )}
                        </Box>
                      </Link>

                      {/* Body */}

                      <VStack
                        w={["100%"]}
                        height={["100%"]}
                        alignItems={["flex-start"]}
                        spacing={["40px"]}
                      >
                        <VStack
                          w={["100%"]}
                          height={["100%"]}
                          alignItems={["flex-start"]}
                        >
                          <Link
                            fontSize={["2xl", "3xl", "4xl"]}
                            fontWeight={["bold"]}
                            _hover={{
                              textDecoration: "underline",
                            }}
                            as={NextLink}
                            href={`/blogs/${id}`}
                          >
                            {attributes.judul}
                          </Link>

                          <Text fontSize={["md", "lg", "xl"]}>
                            {dayjs(attributes.createdAt).format(
                              "MMMM DD, YYYY"
                            )}{" "}
                            - {waktuMembaca} Menit
                          </Text>
                        </VStack>
                        <VStack w={["100%"]} alignItems={["flex-start"]}>
                          <Text fontSize={["lg", "xl", "2xl"]}>
                            {attributes.deskripsi}...
                          </Text>
                          <Link
                            fontSize={["lg", "xl", "2xl"]}
                            fontWeight={["bold"]}
                            color={["brand.50"]}
                            _hover={{
                              textDecoration: "underline",
                            }}
                            as={NextLink}
                            href={`/blogs/${id}`}
                          >
                            Klik disini untuk membaca selengkapnya.
                          </Link>
                        </VStack>
                      </VStack>

                      {/* Footer */}
                      <HStack
                        w={["100%"]}
                        height={["100%"]}
                        alignItems={["flex-start"]}
                      >
                        {attributes.tags.data.map(({ id, attributes }) => {
                          return (
                            <Link
                              as={NextLink}
                              href={`/blogs?tag=${id}`}
                              fontWeight={["bold"]}
                              color="brand.50"
                              fontSize={["md", "lg", "xl"]}
                              key={id}
                            >
                              # {attributes.title}
                            </Link>
                          );
                        })}
                      </HStack>
                    </VStack>
                    {/* Batas */}
                    <Box
                      w={["90%"]}
                      height={["1px"]}
                      bgColor={["rgba(0,0,0, 0.2)"]}
                    />
                  </React.Fragment>
                );
              })}
              {/* End Of Card */}
            </VStack>
          </GridItem>

          <Modal size="xl" isOpen={isOpen} onClose={onClose}>
            <ModalOverlay />
            <ModalContent>
              <ModalHeader color="brand.50">Personal Project</ModalHeader>
              <ModalCloseButton color="brand.50" />
              <ModalBody>
                <FilterComponent forModal={true} langgananTampil={false} />
              </ModalBody>

              <ModalFooter>
                <Button variant="brand" onClick={onClose}>
                  Tutup
                </Button>
              </ModalFooter>
            </ModalContent>
          </Modal>
        </Grid>
      </VStack>
    </>
  );
}

function FilterComponent({ langgananTampil, forModal }) {
  return (
    <VStack
      w={["100%"]}
      height={[forModal ? "350px" : "100%"]}
      alignItems={["center"]}
      spacing={["60px"]}
    >
      <VStack
        w={["100%"]}
        height={["max-content"]}
        alignItems={["center"]}
        spacing={["10px"]}
      >
        <Text
          color="brand.50"
          fontSize={["2xl", "3xl", "4xl"]}
          fontWeight={["bold"]}
        >
          Filter
        </Text>

        <VStack w={["100%"]} h={["100%"]} spacing={["20px"]}>
          <VStack w={["100%"]} h={["100%"]} alignItems={["flex-start"]}>
            <Text
              color="brand.50"
              fontSize={["lg", "xl", "2xl"]}
              fontWeight={["bold"]}
            >
              Judul
            </Text>
            <HStack
              w={["100%"]}
              // borderWidth={["1px"]}
              // borderColor={["brand.50"]}
              borderRadius={["8px"]}
              h={["100%"]}
              spacing={[0]}
              // _hover={{ opacity: ["0.8"] }}
              // _focusVisible={{ borderWidth: ["2px"], opacity: ['1'] }}
              // overflow={['hidden']}
            >
              <Input
                data-peer=""
                w={["70%"]}
                borderColor={["brand.50"]}
                _focusVisible={{ boxShadow: "0 0 1px #7e1aff" }}
                _hover={{ borderColor: ["brand.600"] }}
                borderRightRadius={["0"]}
                borderLeftRadius={["8px"]}
              ></Input>
              <Button
                w={["30%"]}
                height={["100%"]}
                bgColor={["brand.50"]}
                cursor={["pointer"]}
                color={["white"]}
                borderRadius={[0]}
                _hover={{ backgroundColor: "brand.500" }}
                borderRightRadius={["8px"]}
                borderLeftRadius={["0px"]}
              >
                Cari
              </Button>
            </HStack>
          </VStack>

          <VStack w={["100%"]} alignItems={["flex-start"]}>
            <Text
              color="brand.50"
              fontSize={["lg", "xl", "2xl"]}
              fontWeight={["bold"]}
            >
              Tags
            </Text>
            <HStack
              w={["100%"]}
              borderRadius={["50%"]}
              h={["100%"]}
              borderColor={["brand.50"]}
            >
              <Input
                borderColor={["brand.50"]}
                _focusVisible={{ boxShadow: "0 0 1px #7e1aff" }}
                _hover={{ borderColor: ["brand.600"] }}
                borderRadius={["8px"]}
                w={["100%"]}
              ></Input>
            </HStack>
          </VStack>

          <SimpleGrid columns={2} w={["100%"]} spacingX={["30px"]}>
            <VStack w={["100%"]} alignItems={["flex-start"]}>
              <Text
                color="brand.50"
                fontSize={["lg", "xl", "2xl"]}
                fontWeight={["bold"]}
              >
                Dari
              </Text>
              <HStack
                w={["100%"]}
                borderRadius={["50%"]}
                h={["100%"]}
                borderColor={["brand.50"]}
              >
                <Input
                  borderColor={["brand.50"]}
                  _focusVisible={{ boxShadow: "0 0 1px #7e1aff" }}
                  _hover={{ borderColor: ["brand.600"] }}
                  borderRadius={["8px"]}
                  w={["100%"]}
                  type="date"
                ></Input>
              </HStack>
            </VStack>
            <VStack w={["100%"]} alignItems={["flex-start"]}>
              <Text
                color="brand.50"
                fontSize={["lg", "xl", "2xl"]}
                fontWeight={["bold"]}
              >
                Sampai
              </Text>
              <HStack
                w={["100%"]}
                borderRadius={["50%"]}
                h={["100%"]}
                borderColor={["brand.50"]}
              >
                <Input
                  borderColor={["brand.50"]}
                  _focusVisible={{ boxShadow: "0 0 1px #7e1aff" }}
                  _hover={{ borderColor: ["brand.600"] }}
                  borderRadius={["8px"]}
                  w={["100%"]}
                  type="date"
                ></Input>
              </HStack>
            </VStack>
          </SimpleGrid>
        </VStack>
      </VStack>

      {langgananTampil && (
        <>
          <Box w={["90%"]} height={["1px"]} bgColor={["rgba(0,0,0, 0.2)"]} />
          <Berlangganan maxContent />
        </>
      )}
    </VStack>
  );
}
